/*
 * Dog - Core
 * 
 * Copyright (c) 2009-2014 Dario Bonino and Luigi De Russis
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.02.15 at 03:00:00 PM CEST 
//

package it.polito.elite.dog.core.library.jaxb;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * <p>
 * Java class for device complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="device">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="isIn" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="actuatorOf" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="sensorOf" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="pluggedIn" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="meterOf" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="controls" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="hasMeter" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="param" type="{http://elite.polito.it/dogHomeConfiguration}configparam" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="controlFunctionality" type="{http://elite.polito.it/dogHomeConfiguration}controlFunctionality" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="notificationFunctionality" type="{http://elite.polito.it/dogHomeConfiguration}notificationFunctionality" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="state" type="{http://elite.polito.it/dogHomeConfiguration}configstate" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute name="class" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;attribute name="domoticSystem" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="gateway" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "device", propOrder = { "description", "isIn", "actuatorOf", "sensorOf", "pluggedIn", "meterOf",
		"controls", "hasMeter", "param", "controlFunctionality", "notificationFunctionality", "state" })
public class Device implements Cloneable
{
	
	protected String description;
	protected String isIn;
	protected String actuatorOf;
	protected String sensorOf;
	protected String pluggedIn;
	protected List<String> meterOf;
	protected List<String> controls;
	protected String hasMeter;
	protected List<Configparam> param;
	protected List<ControlFunctionality> controlFunctionality;
	protected List<NotificationFunctionality> notificationFunctionality;
	@XmlElement(required = true)
	protected List<Configstate> state;
	@XmlAttribute(name = "class", required = true)
	@JsonProperty("class")
	protected String clazz;
	@XmlAttribute(name = "id", required = true)
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	@XmlID
	@XmlSchemaType(name = "ID")
	protected String id;
	@XmlAttribute(name = "domoticSystem")
	protected String domoticSystem;
	@XmlAttribute(name = "gateway")
	protected String gateway;
	
	/**
	 * Creates a new {@code Device} instance.
	 * 
	 */
	public Device()
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		super();
	}
	
	/**
	 * Creates a new {@code Device} instance by deeply copying a given
	 * {@code Device} instance.
	 * 
	 * 
	 * @param o
	 *            The instance to copy.
	 * @throws NullPointerException
	 *             if {@code o} is {@code null}.
	 */
	public Device(final Device o)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		super();
		if (o == null)
		{
			throw new NullPointerException("Cannot create a copy of 'Device' from 'null'.");
		}
		// CBuiltinLeafInfo: java.lang.String
		this.description = ((o.description == null) ? null : o.getDescription());
		// CBuiltinLeafInfo: java.lang.String
		this.isIn = ((o.isIn == null) ? null : o.getIsIn());
		// CBuiltinLeafInfo: java.lang.String
		this.actuatorOf = ((o.actuatorOf == null) ? null : o.getActuatorOf());
		// CBuiltinLeafInfo: java.lang.String
		this.sensorOf = ((o.sensorOf == null) ? null : o.getSensorOf());
		// CBuiltinLeafInfo: java.lang.String
		this.pluggedIn = ((o.pluggedIn == null) ? null : o.getPluggedIn());
		// 'MeterOf' collection.
		if (o.meterOf != null)
		{
			copyMeterOf(o.getMeterOf(), this.getMeterOf());
		}
		// 'Controls' collection.
		if (o.controls != null)
		{
			copyControls(o.getControls(), this.getControls());
		}
		// CBuiltinLeafInfo: java.lang.String
		this.hasMeter = ((o.hasMeter == null) ? null : o.getHasMeter());
		// 'Param' collection.
		if (o.param != null)
		{
			copyParam(o.getParam(), this.getParam());
		}
		// 'ControlFunctionality' collection.
		if (o.controlFunctionality != null)
		{
			copyControlFunctionality(o.getControlFunctionality(), this.getControlFunctionality());
		}
		// 'NotificationFunctionality' collection.
		if (o.notificationFunctionality != null)
		{
			copyNotificationFunctionality(o.getNotificationFunctionality(), this.getNotificationFunctionality());
		}
		// 'State' collection.
		if (o.state != null)
		{
			copyState(o.getState(), this.getState());
		}
		// CBuiltinLeafInfo: java.lang.String
		this.clazz = ((o.clazz == null) ? null : o.getClazz());
		// CBuiltinLeafInfo: java.lang.String
		this.id = ((o.id == null) ? null : o.getId());
		// CBuiltinLeafInfo: java.lang.String
		this.domoticSystem = ((o.domoticSystem == null) ? null : o.getDomoticSystem());
		// CBuiltinLeafInfo: java.lang.String
		this.gateway = ((o.gateway == null) ? null : o.getGateway());
	}
	
	/**
	 * Gets the value of the description property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getDescription()
	{
		return description;
	}
	
	/**
	 * Sets the value of the description property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setDescription(String value)
	{
		this.description = value;
	}
	
	/**
	 * Gets the value of the isIn property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getIsIn()
	{
		return isIn;
	}
	
	/**
	 * Sets the value of the isIn property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setIsIn(String value)
	{
		this.isIn = value;
	}
	
	/**
	 * Gets the value of the actuatorOf property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getActuatorOf()
	{
		return actuatorOf;
	}
	
	/**
	 * Sets the value of the actuatorOf property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setActuatorOf(String value)
	{
		this.actuatorOf = value;
	}
	
	/**
	 * Gets the value of the sensorOf property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getSensorOf()
	{
		return sensorOf;
	}
	
	/**
	 * Sets the value of the sensorOf property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setSensorOf(String value)
	{
		this.sensorOf = value;
	}
	
	/**
	 * Gets the value of the pluggedIn property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getPluggedIn()
	{
		return pluggedIn;
	}
	
	/**
	 * Sets the value of the pluggedIn property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setPluggedIn(String value)
	{
		this.pluggedIn = value;
	}
	
	/**
	 * Gets the value of the meterOf property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the meterOf property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getMeterOf().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link String }
	 * 
	 * 
	 */
	public List<String> getMeterOf()
	{
		if (meterOf == null)
		{
			meterOf = new ArrayList<String>();
		}
		return this.meterOf;
	}
	
	/**
	 * Gets the value of the controls property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the controls property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getControls().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link String }
	 * 
	 * 
	 */
	public List<String> getControls()
	{
		if (controls == null)
		{
			controls = new ArrayList<String>();
		}
		return this.controls;
	}
	
	/**
	 * Gets the value of the hasMeter property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getHasMeter()
	{
		return hasMeter;
	}
	
	/**
	 * Sets the value of the hasMeter property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setHasMeter(String value)
	{
		this.hasMeter = value;
	}
	
	/**
	 * Gets the value of the param property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the param property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getParam().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link Configparam }
	 * 
	 * 
	 */
	public List<Configparam> getParam()
	{
		if (param == null)
		{
			param = new ArrayList<Configparam>();
		}
		return this.param;
	}
	
	/**
	 * Gets the value of the controlFunctionality property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the controlFunctionality property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getControlFunctionality().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link ControlFunctionality }
	 * 
	 * 
	 */
	public List<ControlFunctionality> getControlFunctionality()
	{
		if (controlFunctionality == null)
		{
			controlFunctionality = new ArrayList<ControlFunctionality>();
		}
		return this.controlFunctionality;
	}
	
	/**
	 * Gets the value of the notificationFunctionality property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the notificationFunctionality property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getNotificationFunctionality().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link NotificationFunctionality }
	 * 
	 * 
	 */
	public List<NotificationFunctionality> getNotificationFunctionality()
	{
		if (notificationFunctionality == null)
		{
			notificationFunctionality = new ArrayList<NotificationFunctionality>();
		}
		return this.notificationFunctionality;
	}
	
	/**
	 * Gets the value of the state property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the state property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getState().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link Configstate }
	 * 
	 * 
	 */
	public List<Configstate> getState()
	{
		if (state == null)
		{
			state = new ArrayList<Configstate>();
		}
		return this.state;
	}
	
	/**
	 * Gets the value of the clazz property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getClazz()
	{
		return clazz;
	}
	
	/**
	 * Sets the value of the clazz property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setClazz(String value)
	{
		this.clazz = value;
	}
	
	/**
	 * Gets the value of the id property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getId()
	{
		return id;
	}
	
	/**
	 * Sets the value of the id property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setId(String value)
	{
		this.id = value;
	}
	
	/**
	 * Gets the value of the domoticSystem property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getDomoticSystem()
	{
		return domoticSystem;
	}
	
	/**
	 * Sets the value of the domoticSystem property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setDomoticSystem(String value)
	{
		this.domoticSystem = value;
	}
	
	/**
	 * Gets the value of the gateway property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getGateway()
	{
		return gateway;
	}
	
	/**
	 * Sets the value of the gateway property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setGateway(String value)
	{
		this.gateway = value;
	}
	
	/**
	 * Copies all values of property {@code MeterOf} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyMeterOf(final List<String> source, final List<String> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof String)
				{
					// CBuiltinLeafInfo: java.lang.String
					target.add(((String) next));
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'MeterOf' of class 'it.polito.elite.dog.core.library.jaxb.Device'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code Controls} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyControls(final List<String> source, final List<String> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof String)
				{
					// CBuiltinLeafInfo: java.lang.String
					target.add(((String) next));
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'Controls' of class 'it.polito.elite.dog.core.library.jaxb.Device'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code Param} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyParam(final List<Configparam> source, final List<Configparam> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof Configparam)
				{
					// CClassInfo:
					// it.polito.elite.dog.core.library.jaxb.Configparam
					target.add(((Configparam) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'Param' of class 'it.polito.elite.dog.core.library.jaxb.Device'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code ControlFunctionality} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyControlFunctionality(final List<ControlFunctionality> source,
			final List<ControlFunctionality> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof ControlFunctionality)
				{
					// CClassInfo:
					// it.polito.elite.dog.core.library.jaxb.ControlFunctionality
					target.add(((ControlFunctionality) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'ControlFunctionality' of class 'it.polito.elite.dog.core.library.jaxb.Device'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code NotificationFunctionality} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyNotificationFunctionality(final List<NotificationFunctionality> source,
			final List<NotificationFunctionality> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof NotificationFunctionality)
				{
					// CClassInfo:
					// it.polito.elite.dog.core.library.jaxb.NotificationFunctionality
					target.add(((NotificationFunctionality) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'NotificationFunctionality' of class 'it.polito.elite.dog.core.library.jaxb.Device'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code State} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyState(final List<Configstate> source, final List<Configstate> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof Configstate)
				{
					// CClassInfo:
					// it.polito.elite.dog.core.library.jaxb.Configstate
					target.add(((Configstate) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'State' of class 'it.polito.elite.dog.core.library.jaxb.Device'."));
			}
		}
	}
	
	/**
	 * Creates and returns a deep copy of this object.
	 * 
	 * 
	 * @return A deep copy of this object.
	 */
	@Override
	public Device clone()
	{
		try
		{
			{
				// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
				final Device clone = ((Device) super.clone());
				// CBuiltinLeafInfo: java.lang.String
				clone.description = ((this.description == null) ? null : this.getDescription());
				// CBuiltinLeafInfo: java.lang.String
				clone.isIn = ((this.isIn == null) ? null : this.getIsIn());
				// CBuiltinLeafInfo: java.lang.String
				clone.actuatorOf = ((this.actuatorOf == null) ? null : this.getActuatorOf());
				// CBuiltinLeafInfo: java.lang.String
				clone.sensorOf = ((this.sensorOf == null) ? null : this.getSensorOf());
				// CBuiltinLeafInfo: java.lang.String
				clone.pluggedIn = ((this.pluggedIn == null) ? null : this.getPluggedIn());
				// 'MeterOf' collection.
				if (this.meterOf != null)
				{
					clone.meterOf = null;
					copyMeterOf(this.getMeterOf(), clone.getMeterOf());
				}
				// 'Controls' collection.
				if (this.controls != null)
				{
					clone.controls = null;
					copyControls(this.getControls(), clone.getControls());
				}
				// CBuiltinLeafInfo: java.lang.String
				clone.hasMeter = ((this.hasMeter == null) ? null : this.getHasMeter());
				// 'Param' collection.
				if (this.param != null)
				{
					clone.param = null;
					copyParam(this.getParam(), clone.getParam());
				}
				// 'ControlFunctionality' collection.
				if (this.controlFunctionality != null)
				{
					clone.controlFunctionality = null;
					copyControlFunctionality(this.getControlFunctionality(), clone.getControlFunctionality());
				}
				// 'NotificationFunctionality' collection.
				if (this.notificationFunctionality != null)
				{
					clone.notificationFunctionality = null;
					copyNotificationFunctionality(this.getNotificationFunctionality(),
							clone.getNotificationFunctionality());
				}
				// 'State' collection.
				if (this.state != null)
				{
					clone.state = null;
					copyState(this.getState(), clone.getState());
				}
				// CBuiltinLeafInfo: java.lang.String
				clone.clazz = ((this.clazz == null) ? null : this.getClazz());
				// CBuiltinLeafInfo: java.lang.String
				clone.id = ((this.id == null) ? null : this.getId());
				// CBuiltinLeafInfo: java.lang.String
				clone.domoticSystem = ((this.domoticSystem == null) ? null : this.getDomoticSystem());
				// CBuiltinLeafInfo: java.lang.String
				clone.gateway = ((this.gateway == null) ? null : this.getGateway());
				return clone;
			}
		}
		catch (CloneNotSupportedException e)
		{
			// Please report this at
			// https://apps.sourceforge.net/mantisbt/ccxjc/
			throw new AssertionError(e);
		}
	}
	
}
