/*
 * Dog - Core
 * 
 * Copyright (c) 2009-2014 Dario Bonino and Luigi De Russis
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.02.15 at 03:00:00 PM CEST 
//

package it.polito.elite.dog.core.library.jaxb;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * <p>
 * Java class for building complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="building">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element name="storey" type="{http://elite.polito.it/dogHomeConfiguration}storey" maxOccurs="unbounded"/>
 *           &lt;element name="flat" type="{http://elite.polito.it/dogHomeConfiguration}flat" maxOccurs="unbounded"/>
 *         &lt;/choice>
 *         &lt;element name="garden" type="{http://elite.polito.it/dogHomeConfiguration}garden" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="garage" type="{http://elite.polito.it/dogHomeConfiguration}garage" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;attribute name="class" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "building", propOrder = { "storey", "flat", "garden", "garage" })
public class Building implements Cloneable
{
	
	protected List<Storey> storey;
	@JsonProperty("flats")
	protected List<Flat> flat;
	protected List<Garden> garden;
	protected List<Garage> garage;
	@XmlAttribute(name = "id")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	@XmlID
	@XmlSchemaType(name = "ID")
	protected String id;
	@XmlAttribute(name = "class")
	@JsonProperty("class")
	protected String clazz;
	
	/**
	 * Creates a new {@code Building} instance.
	 * 
	 */
	public Building()
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		super();
	}
	
	/**
	 * Creates a new {@code Building} instance by deeply copying a given
	 * {@code Building} instance.
	 * 
	 * 
	 * @param o
	 *            The instance to copy.
	 * @throws NullPointerException
	 *             if {@code o} is {@code null}.
	 */
	public Building(final Building o)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		super();
		if (o == null)
		{
			throw new NullPointerException("Cannot create a copy of 'Building' from 'null'.");
		}
		// 'Storey' collection.
		if (o.storey != null)
		{
			copyStorey(o.getStorey(), this.getStorey());
		}
		// 'Flat' collection.
		if (o.flat != null)
		{
			copyFlat(o.getFlat(), this.getFlat());
		}
		// 'Garden' collection.
		if (o.garden != null)
		{
			copyGarden(o.getGarden(), this.getGarden());
		}
		// 'Garage' collection.
		if (o.garage != null)
		{
			copyGarage(o.getGarage(), this.getGarage());
		}
		// CBuiltinLeafInfo: java.lang.String
		this.id = ((o.id == null) ? null : o.getId());
		// CBuiltinLeafInfo: java.lang.String
		this.clazz = ((o.clazz == null) ? null : o.getClazz());
	}
	
	/**
	 * Gets the value of the storey property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the storey property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getStorey().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link Storey }
	 * 
	 * 
	 */
	public List<Storey> getStorey()
	{
		if (storey == null)
		{
			storey = new ArrayList<Storey>();
		}
		return this.storey;
	}
	
	/**
	 * Gets the value of the flat property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the flat property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getFlat().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link Flat }
	 * 
	 * 
	 */
	public List<Flat> getFlat()
	{
		if (flat == null)
		{
			flat = new ArrayList<Flat>();
		}
		return this.flat;
	}
	
	/**
	 * Gets the value of the garden property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the garden property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getGarden().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link Garden }
	 * 
	 * 
	 */
	public List<Garden> getGarden()
	{
		if (garden == null)
		{
			garden = new ArrayList<Garden>();
		}
		return this.garden;
	}
	
	/**
	 * Gets the value of the garage property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the garage property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getGarage().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link Garage }
	 * 
	 * 
	 */
	public List<Garage> getGarage()
	{
		if (garage == null)
		{
			garage = new ArrayList<Garage>();
		}
		return this.garage;
	}
	
	/**
	 * Gets the value of the id property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getId()
	{
		return id;
	}
	
	/**
	 * Sets the value of the id property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setId(String value)
	{
		this.id = value;
	}
	
	/**
	 * Gets the value of the clazz property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getClazz()
	{
		return clazz;
	}
	
	/**
	 * Sets the value of the clazz property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setClazz(String value)
	{
		this.clazz = value;
	}
	
	/**
	 * Copies all values of property {@code Storey} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyStorey(final List<Storey> source, final List<Storey> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof Storey)
				{
					// CClassInfo: it.polito.elite.dog.core.library.jaxb.Storey
					target.add(((Storey) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'Storey' of class 'it.polito.elite.dog.core.library.jaxb.Building'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code Flat} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyFlat(final List<Flat> source, final List<Flat> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof Flat)
				{
					// CClassInfo: it.polito.elite.dog.core.library.jaxb.Flat
					target.add(((Flat) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'Flat' of class 'it.polito.elite.dog.core.library.jaxb.Building'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code Garden} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyGarden(final List<Garden> source, final List<Garden> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof Garden)
				{
					// CClassInfo: it.polito.elite.dog.core.library.jaxb.Garden
					target.add(((Garden) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'Garden' of class 'it.polito.elite.dog.core.library.jaxb.Building'."));
			}
		}
	}
	
	/**
	 * Copies all values of property {@code Garage} deeply.
	 * 
	 * @param source
	 *            The source to copy from.
	 * @param target
	 *            The target to copy {@code source} to.
	 * @throws NullPointerException
	 *             if {@code target} is {@code null}.
	 */
	private static void copyGarage(final List<Garage> source, final List<Garage> target)
	{
		// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
		if ((source != null) && (!source.isEmpty()))
		{
			for (final Iterator<?> it = source.iterator(); it.hasNext();)
			{
				final Object next = it.next();
				if (next instanceof Garage)
				{
					// CClassInfo: it.polito.elite.dog.core.library.jaxb.Garage
					target.add(((Garage) next).clone());
					continue;
				}
				// Please report this at
				// https://apps.sourceforge.net/mantisbt/ccxjc/
				throw new AssertionError(
						(("Unexpected instance '" + next) + "' for property 'Garage' of class 'it.polito.elite.dog.core.library.jaxb.Building'."));
			}
		}
	}
	
	/**
	 * Creates and returns a deep copy of this object.
	 * 
	 * 
	 * @return A deep copy of this object.
	 */
	@Override
	public Building clone()
	{
		try
		{
			{
				// CC-XJC Version 2.0.1 Build 2012-03-02T12:09:12+0000
				final Building clone = ((Building) super.clone());
				// 'Storey' collection.
				if (this.storey != null)
				{
					clone.storey = null;
					copyStorey(this.getStorey(), clone.getStorey());
				}
				// 'Flat' collection.
				if (this.flat != null)
				{
					clone.flat = null;
					copyFlat(this.getFlat(), clone.getFlat());
				}
				// 'Garden' collection.
				if (this.garden != null)
				{
					clone.garden = null;
					copyGarden(this.getGarden(), clone.getGarden());
				}
				// 'Garage' collection.
				if (this.garage != null)
				{
					clone.garage = null;
					copyGarage(this.getGarage(), clone.getGarage());
				}
				// CBuiltinLeafInfo: java.lang.String
				clone.id = ((this.id == null) ? null : this.getId());
				// CBuiltinLeafInfo: java.lang.String
				clone.clazz = ((this.clazz == null) ? null : this.getClazz());
				return clone;
			}
		}
		catch (CloneNotSupportedException e)
		{
			// Please report this at
			// https://apps.sourceforge.net/mantisbt/ccxjc/
			throw new AssertionError(e);
		}
	}
	
}
